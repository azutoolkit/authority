on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
jobs:
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: authority_db
          POSTGRES_USER: auth_user
          POSTGRES_PASSWORD: auth_pass
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: crystal-lang/install-crystal@v1

      - name: Crystal Ameba Linter
        uses: crystal-ameba/github-action@v0.2.12
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Firefox
        run: sudo apt-get install firefox -y
      - name: Install Dependencies
        run: shards install

      - name: Build Authority Server
        run: shards build

      - name: Run tests
        uses: browser-actions/setup-geckodriver@latest
        run: crystal spec
        env:
          LOG_LEVEL: "debug"
          CRYSTAL_WORKERS: 4
          PORT_REUSE: true
          SECRET_KEY: secret_key
          REFRESH_TTL: 60
          CODE_TTL: 5
          ACCESS_TOKEN_TTL: 60
          ERROR_TEMPLATE:
          SESSION_KEY: "authority.sess"
          SESSION_SECRET: "K,n:aT5CY4Trkg2JjS\e/?F[?e(Pjjhgd"
          BASE_URL: http://localhost:4000
          DEVICE_CODE_TTL: 300
          TEMPLATE_PATH: ./public/templates
          DATABASE_URL: postgres://auth_user:auth_pass@localhost:5432/authority_db?initial_pool_size=10&checkout_timeout=3
  release:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ success() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute Release Version
        id: semver
        uses: paulhatch/semantic-version@v4.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

      - name: Bump Shard Version
        id: bump-shard
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: shard.yml
          propertyPath: version
          value: ${{steps.semver.outputs.version}}
          commitChange: true
          updateFile: true
          targetBranch: main
          masterBranchName: main
          createPR: false
          branch: main
          message: Set shard version ${{ steps.semver.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.semver.outputs.version_tag}}
          release_name: Release v${{steps.semver.outputs.version}}
          draft: false
          prerelease: true
